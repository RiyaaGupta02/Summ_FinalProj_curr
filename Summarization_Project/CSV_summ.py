from langchain_community.llms.ai21 import AI21
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate
import streamlit as sl
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np


import os
from dotenv import load_dotenv
load_dotenv()

api_key=os.getenv('AI21_API_KEY')

def summarize_data(df):
    """
    This function takes a pandas dataframe and uses Langchain with AI21 model
    to generate summary insights.
    
    Args:
        data: pandas DataFrame
    Returns:
        str: Summarization text generated by AI21 model
    """
    # Initialize AI21 LLM
    llm = AI21()
    
    # Create a prompt template
    prompt_template = PromptTemplate(
        input_variables=["table_data"],
        template="Provide a summary of the data in this table:\n{table_data}"
    )
    
    # Create an LLMChain
    chain = LLMChain(llm=llm, prompt=prompt_template)
    
    # Convert DataFrame to string representation
    table_string = df.to_string(index=False)
    
    # Generate summary
    summary = chain.invoke(input=table_string)
    
    return summary


def create_visualizations(df, start_row, end_row):
    selected_df = df.iloc[start_row:end_row+1]
    numeric_df = selected_df.select_dtypes(include=[np.number])
    
    sl.subheader(f"Selected Range Insights (Row {start_row} to {end_row})")
    
    # Create buttons for different visualizations
    viz_options = sl.multiselect(
        "Choose visualizations:",
        ["Heatmap", "Bar Chart", "Box Plot", "Correlation Matrix", "Descriptive Statistics", "Line Chart"]
    )
    
    for option in viz_options:
        if option == "Heatmap" or option == " Correlation Matrix":
            if numeric_df.empty:
                sl.warning(f"Cannot create {option} because there are no numeric columns in the selected range.")
            elif numeric_df.shape[1] < 2:
                sl.warning(f"Cannot create {option} because there is only one numeric column in the selected range.")
            else:
                sl.subheader(option)
                fig, ax = plt.subplots(figsize=(10, 8))
                sns.heatmap(selected_df.select_dtypes(include=[np.number]).corr(), annot=True, cmap="coolwarm", ax=ax)
                sl.pyplot(fig)
        
        elif option == "Bar Chart":
            sl.subheader("Bar Chart")
            column = sl.selectbox("Select column for bar chart:", selected_df.columns)
            sl.bar_chart(selected_df[column])
        
        elif option == "Box Plot":
            sl.subheader("Box Plot")
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.boxplot(data=selected_df.select_dtypes(include=[np.number]), ax=ax)
            plt.xticks(rotation=45)
            sl.pyplot(fig)
        
        elif option == "Descriptive Statistics":
            sl.subheader("Descriptive Statistics")
            sl.write(selected_df.describe())
        
        elif option == "Line Chart":
            sl.subheader("Line Chart")
            columns = sl.multiselect("Select columns for line chart:", selected_df.columns)
            if columns:
                sl.line_chart(selected_df[columns])
            else:
                sl.warning("Please select at least one column for the line chart.")
